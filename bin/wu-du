#!/usr/bin/env ruby
require_relative '../lib/wukong/script/hadoop_runner'

Settings.define :summary, flag: 's', description: 'Summarize'
Settings.resolve!

# Prepare command
def prepare_command
  cmd = ['fs']
  cmd << (Settings.summary ? '-dus' : '-du')
  cmd + Settings.rest
end

Numeric.class_eval do
  def bytes()       self                    ; end
  alias :byte :bytes
  def kilobytes()   self * 1024             ; end
  alias :kilobyte :kilobytes
  def megabytes()   self * 1024.kilobytes   ; end
  alias :megabyte :megabytes
  def gigabytes()   self * 1024.megabytes   ; end
  alias :gigabyte :gigabytes
  def terabytes()   self * 1024.gigabytes   ; end
  alias :terabyte :terabytes
  def petabytes()   self * 1024.terabytes   ; end
  alias :petabyte :petabytes
  def exabytes()    self * 1024.petabytes   ; end
  alias :exabyte :exabytes
end

# Formats the bytes in +size+ into a more understandable representation
# (e.g., giving it 1500 yields 1.5 KB). This method is useful for
# reporting file sizes to users. This method returns nil if
# +size+ cannot be converted into a number. You can change the default
# precision of 1 using the precision parameter +precision+.
#
# ==== Examples
#  number_to_human_size(123)           # => 123 Bytes
#  number_to_human_size(1234)          # => 1.2 KB
#  number_to_human_size(12345)         # => 12.1 KB
#  number_to_human_size(1234567)       # => 1.2 MB
#  number_to_human_size(1234567890)    # => 1.1 GB
#  number_to_human_size(1234567890123) # => 1.1 TB
#  number_to_human_size(1234567, 2)    # => 1.18 MB
#  number_to_human_size(483989, 0)     # => 4 MB
def number_to_human_size(size, precision=1)
  size = Kernel.Float(size)
  case
  when size < 1.kilobyte; "%d  B" % size
  when size < 1.megabyte; "%.#{precision}f KB"  % (size / 1.0.kilobyte)
  when size < 1.gigabyte; "%.#{precision}f MB"  % (size / 1.0.megabyte)
  when size < 1.terabyte; "%.#{precision}f GB"  % (size / 1.0.gigabyte)
  else                    "%.#{precision}f TB"  % (size / 1.0.terabyte)
  end #.sub(/([0-9]\.\d*?)0+ /, '\1 ' ).sub(/\. /,' ')
rescue
  nil
end

OUTPUT_LINE_FMT = "%-71s\t%15d\t%15s"

def format_output file, size
  human_size = number_to_human_size(size) || ""
  file = file.gsub(%r{hdfs://[^/]+/}, '/') # kill off hdfs paths, otherwise leave it alone
  OUTPUT_LINE_FMT % [file, size.to_i, human_size]
end

entries_count = 0
total_size  = 0

stdout, stderr, exit_status = Wukong::Script::HadoopRunner.run(prepare_command)

stdout.split("\n").each do |line|
  if line =~ /^Found \d+ items$/ then puts line ; next end
  info = line.split(/\s+/)
  if Settings.summary then file, size = info else size, file = info end
  puts format_output(file, size)
  total_size  += size.to_i
  entries_count += 1
end

$stderr.puts OUTPUT_LINE_FMT%[" #{"%55d"%entries_count} entries", total_size, number_to_human_size(total_size)]

exit exit_status
